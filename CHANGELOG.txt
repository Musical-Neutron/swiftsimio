SWIFTsimIO Changelog
====================

v 1.1.0
-------

The parallel update!

+ Adds parallel visualisation routines for all projection, slice, and volume
  rendering options. This can be activated by using the `parallel=True` argument.
+ Upgraded to `unyt` version 2.3.0 or above. This allows us to stay on track with
  `unyt` as previously we required an older version.

v 1.0.3
-------

Boundary particles bugfix

+ Fixes a bug preventing snapshots that include boundary particles from being used
  with cell masking.

v 1.0.2
-------

Visualisation bugfix

+ A botched merge left some incorrect code in visualisation. This is now fixed.

v 1.0.1
-------

Temperature bugfix

+ A check in the code for dimensionless quantities was accidentally picking up temperatures as also
  being dimensionless. This is now fixed.


v 1.0.0
-------

Major breaking changes ahead!

This update adds:

+ Metadata directly copied out of the snapshots
+ Ability to add new particle fields without needing to update `swiftsimio`
+ Breaks backwards compatiblity with older versions of SWIFT (require v>0.9.0)

v 0.8.0
-------

Adds volume rendering (BETA)!

+ Adds a new (hidden) volume render mode, in `visualisation.volume_render`
+ Bugfixes for kernel implementations.

v 0.7.0
-------

Added extra boundary particles!

+ Two new particle types, `boundary` and `second_boundary`, for zoom-in simulations.

v 0.6.0
-------

Basic slice image functionality!

+ Added some more imaging code that now creates slice plots. Again, this is
  mainly useful for making movies. You'll want to use `yt` or py-sphviewer for
  more complex things.
+ Internally, we moved the visualisation stuff to a sub-module.
+ Minor bug-fixes in the imaging code to do with kernel normalization.

v 0.5.0
-------

Basic image-creation functionality!

+ Added some (super fast) routines to make projections of the whole box. This is
  only useful for simple projections of the whole box and is not thread parallel.
  In particular, it's useful for making movies.

v 0.4.0
-------

User-defined particle types update!

+ Allows for user defined particle types through an API
+ Adds the RunName field.

v 0.3.8
-------

Dependency release:

+ Explicitly makes `unyt<2.0.0` an install requirement.

v 0.3.7
-------

Cooling release:

+ Added RadiatedEnergy -> radiated_energy field.
+ Fixes some issues with information from the diffusion.

v 0.3.6
-------

Urgent bugfix release:

+ Fixed incorrect parsing of dual-purpose metadata.

v 0.3.5
-------

Another bugfix release. This fixes the following errors:

+ Missing variables from metadata that were re-using dictionary keys
+ Fixed `a` always being set to 1.0
+ Added a number of unit tests
+ Actually added correct travis integration.

v 0.3.4
-------

Major bugfixes:

+ Fake jit decorator was incorrectly called in accelerate.py
+ Incorrect metadata

v 0.3.3
-------

Star formation update:

+ Includes some new names for fields that have changed recently in
  the star formation code in SWIFT.

v 0.3.2
-------

ANARCHY update:

+ Added diffusion and viscosity coefficients to the reading metadata

v 0.3.1
-------

The masking performance update:

+ Use `np.take` with integer masks instead of boolean masks for significantly
  improved performance.
+ Major bugfixes to the spatial matching code.

v 0.3.0
-------

The masking update:

+ Added masking object and functions (both spatial and property-based).
+ Added units to relevant unpacked header variables.
+ Added nicer API to access (base) units.
+ Added `present_particle_types property` to metadata.

v 0.2.3
-------

Backwards-compatibility update:

+ Write "NumFilesPerSnapshot", "NumPart_ThisFile", and "MassTable" to snapshots.
+ Added ability to write extra items to the header.

v 0.2.2
-------

Minor bugfixes and improvements:

+ Added the MaterialID field
+ Changed internal energy units to be correct (energy per unit mass).

v 0.2.1
-------

Documentation update!

+ Includes significantly more documentation for how to create initial conditions
  files with `swiftsimio`.
+ Minor bugfixes throughout.
+ Added `swiftsimio.validate_file` to validate your dataset is a SWIFT output
  file before reading.
+ Added a number of metadata properties to the reader for pretty-printing code
  information: `compiler_info`, `library_info`, `hydro_info`, `viscosity_info`,
  `code_info`
+ Added ability to automatically generate smoothing lengths for gas datasets
  in the writer.

v 0.2.0
-------

First writer update:

+ Implements writer functionality. This allows for an object-oriented API to be
  used to create SWIFT IC files.
+ Compatibility changes in the reader to work with self-generated initial
  conditions files.
+ Minor bugfixes.

v 0.1.2
-------

Fixed a minor packaging bug.

v 0.1.1
-------

First minor revision:

+ Fixes a minor packaging issue
+ Implements some boilerplate for upcoming features

v 0.1.0
-------

The first version of the code includes the following:

+ Basic reader functionality implemented
+ `unyt` arrays used for reading data
+ Data read dynamically from snapshot
+ Some basic parsing of header information
+ EAGLE chemistry reader included.
